#!.venv/bin/python3

import numpy as np
import cv2
import os
import subprocess
from tqdm import tqdm
from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument("inputfile", type=str, help="input video mp4 or image file path to scan")
parser.add_argument("outputfile", type=str, nargs="?", help="output video/image file path")
args = parser.parse_args()

input = args.inputfile

if args.outputfile:
    output_path = args.outputfile
else:
    output_path = "map-view.mp4"

vidreader = cv2.VideoCapture(input)
frames = int(vidreader.get(cv2.CAP_PROP_FRAME_COUNT))
fps = vidreader.get(cv2.CAP_PROP_FPS)

intermediate_file = "__inter__.mp4"
vidwriter = cv2.VideoWriter(intermediate_file, cv2.VideoWriter_fourcc(*"mp4v"), fps, (1600, 2950))

for i in tqdm(range(frames), desc="Transforming footage to map view"):
    ret, frame = vidreader.read()

    x=700
    y=2000
    # Points mapping to each other from camera to maps view
    srcPoints = np.array([
        [55, 159],
        [33, 137], 
        [237, 106], 
        [276, 118], 
    ], dtype=np.float32)
    dstPoints = np.array([
        [709 + x, 257 + y],
        [698 + x, 91 + y], 
        [256 + x, 94 + y], 
        [256 + x, 246 + y], 
    ], dtype=np.float32)

    # Compute homography matrix
    H, m = cv2.findHomography(srcPoints, dstPoints, cv2.RANSAC, 5.0)

    aligned = cv2.warpPerspective(frame, H, (1600, 2950))
    vidwriter.write(aligned)
vidwriter.release()

if os.path.exists(output_path):
    os.remove(output_path)
subprocess.run(["ffmpeg", "-i", intermediate_file, output_path])
os.remove(intermediate_file)